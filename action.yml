name: 'Upload a Build Artifact (secured)'
branding:
  icon: arrow-up-circle
  color: blue
description: 'Upload a build artifact if gitleaks secure scan is passing.'
author: 'Sorin Sbarnea'
inputs:
  name:
    description: 'Artifact name'
    default: 'artifact'
  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.

      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: 'warn'
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.

      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: '6'
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: 'false'
  include-hidden-files:
    description: >
      If true, hidden files will be included in the artifact.
      If false, hidden files will be excluded from the artifact.
    default: 'false'

outputs:
  artifact-id:
    description: >
      A unique identifier for the artifact that was just uploaded. Empty if the artifact upload failed.

      This ID can be used as input to other APIs to download, delete or get more information about an artifact: https://docs.github.com/en/rest/actions/artifacts
  artifact-url:
    description: >
      A download URL for the artifact that was just uploaded. Empty if the artifact upload failed.

      This download URL only works for requests Authenticated with GitHub. Anonymous downloads will be prompted to first login.
      If an anonymous download URL is needed than a short time restricted URL can be generated using the download artifact API: https://docs.github.com/en/rest/actions/artifacts#download-an-artifact

      This URL will be valid for as long as the artifact exists and the workflow run and repository exists. Once an artifact has expired this URL will no longer work.
      Common uses cases for such a download URL can be adding download links to artifacts in descriptions or comments on pull requests or issues.
  artifact-digest:
    description: >
      SHA-256 digest for the artifact that was just uploaded. Empty if the artifact upload failed.
runs:
  using: "composite"
  steps:

    - name: Detect latest gitleaks version
      if: runner.os == 'Linux'
      id: gitleaks
      shell: bash
      run: |
        set -euo pipefail
        arch="$(uname)_$(uname -m)"
        platform=$(echo $arch | tr '[:upper:]' '[:lower:]' )
        platform="${platform//aarch64/arm64}"
        platform="${platform//x86_64/x64}"

        max_attempts=5
        attempt=0
        while [[ $attempt -lt $max_attempts ]]; do
            version_tag="$(curl --retry 5 -s -f https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r .name || true)"
            version="${version_tag#v}"
            if [[ -n "$version" ]]; then
                break
            fi
            attempt=$((attempt + 1))
            delay=$((10 + attempt * 10))
            echo "::warning::Attempt $attempt failed to fetch version, retrying in $delay seconds. stdout: ${version_tag}" >&2
            sleep $delay
        done

        if [[ -z "$version" ]]; then
            echo "::error::Failed to fetch Gitleaks version after $max_attempts attempts." >&2
            exit 1
        fi
        echo "platform=$platform" >> $GITHUB_OUTPUT
        echo "version=${version}" >> $GITHUB_OUTPUT

    - name: Install gitleaks (macos)
      if: runner.os == 'macOS'
      run: |
        command -v gitleaks 2>&1 >/dev/null || {
          brew update && brew install gitleaks
        }
      shell: bash

    - name: Install gitleaks (windows)
      if: runner.os == 'Windows'
      run: |
        choco install gitleaks -y
        gitleaks --version
      shell: cmd

    - name: Cache gitleaks archive
      if: runner.os == 'Linux'
      id: cache_gitleaks
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/bin/gitleaks
          ~/.local/bin/gitleaks
        key: gitleaks-${{ steps.gitleaks.outputs.platform }}-${{ steps.gitleaks.outputs.version }}

    - name: Install gitleaks (linux)
      if: runner.os == 'Linux'
      shell: bash
      # prefer user bin path if in PATH to avoid sudo requirements as this case could also happen under WSL
      run: |
        set -euo pipefail
        prefix=~/.local/bin
        if [[ "${{ steps.cache_gitleaks.outputs.cache-hit }}" != "true" || ! -f $prefix/gitleaks ]]; then
          DOWNLOAD_URL="https://github.com/gitleaks/gitleaks/releases/download/v${{ steps.gitleaks.outputs.version }}/gitleaks_${{ steps.gitleaks.outputs.version }}_${{ steps.gitleaks.outputs.platform }}.tar.gz"
          echo "Download Gitleaks ${{ steps.gitleaks.outputs.version }} for ${{ steps.gitleaks.outputs.platform }} from ${DOWNLOAD_URL}"
          mkdir -p $prefix >/dev/null
          curl -fsSL "$DOWNLOAD_URL" | tar xzf - -C $prefix gitleaks
        fi
        chmod +x $prefix/gitleaks

    - name: Run gitleaks
      # gitleaks does not support multiple paths https://github.com/gitleaks/gitleaks/issues/1888
      run: |
        set -e
        IFS=$'\n' read -r -d '' -a INPUT_PATH < <(printf '%s\0' "${{ inputs.path }}")
        RESULT=0
        gitleaks=$(command -v gitleaks) || gitleaks=~/.local/bin/gitleaks
        for path in "${INPUT_PATH[@]}"; do
          shopt -s nullglob
          for file in $path; do
            if [ -e $file ]; then
              $gitleaks dir -v --redact=100 --no-banner --max-archive-depth=2 $file || RESULT=$?
            fi
          done
        done
        exit $RESULT
      shell: bash

    - name: Upload safe artifact using original actions/upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name:  ${{ inputs.name || 'artifact' }}
        path: ${{ inputs.path }}
        if-no-files-found: ${{ inputs.if-no-files-found || 'warn' }}
        retention-days: ${{ inputs.retention-days || 0 }}
        compression-level: ${{ inputs.compression-level || 6 }}
        overwrite: ${{ inputs.overwrite || false }}
        include-hidden-files: ${{ inputs.include-hidden-files || false }}
